# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNXrjEfJpQqFc-QtrC8Z7XJEdI_xam_d
"""

# Import necessary libraries
import pandas as pd
import streamlit as st
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Display title and description
st.title("K-Nearest Neighbors (KNN) Model for Sonar Data")
st.write("This app demonstrates a KNN model trained on sonar data to classify between rocks and mines.")

# Load the data
@st.cache
def load_data():
    # Replace this path with the actual path to your sonar data CSV file
    sonar_data = pd.read_csv("sonar_data.csv", header=None)
    return sonar_data

# Data processing and model setup
sonar_data = load_data()
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=1)

# Train the model
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, Y_train)

# Display input form for custom test input
st.sidebar.header("Input Features")
input_data = [st.sidebar.slider(f"Feature {i}", float(X.min()[i]), float(X.max()[i]), float(X.mean()[i])) for i in range(X.shape[1])]

# Model prediction
if st.sidebar.button("Classify"):
    prediction = knn.predict([input_data])
    st.write(f"Prediction for input: **{prediction[0]}**")

# Evaluate model
Y_pred = knn.predict(X_test)
accuracy = accuracy_score(Y_test, Y_pred)
report = classification_report(Y_test, Y_pred, output_dict=True)
precision = (report['R']['precision'] + report['M']['precision']) / 2
recall = (report['R']['recall'] + report['M']['recall']) / 2
f1_score = (report['R']['f1-score'] + report['M']['f1-score']) / 2

# Display metrics
st.subheader("Model Metrics")
st.write(f"Accuracy: {accuracy:.2f}")
st.write(f"Precision (average): {precision:.2f}")
st.write(f"Recall (average): {recall:.2f}")
st.write(f"F1 Score (average): {f1_score:.2f}")

# Plot metrics
st.subheader("Metrics Bar Chart")
metrics = ['Accuracy', 'Precision', 'Recall', 'F1 Score']
values = [accuracy, precision, recall, f1_score]

fig, ax = plt.subplots()
ax.bar(metrics, values, color=['skyblue', 'lightgreen', 'lightcoral', 'orange'])
ax.set_ylim(0, 1)
ax.set_xlabel("Metrics")
ax.set_ylabel("Score")
ax.set_title("KNN Model Metrics")
st.pyplot(fig)