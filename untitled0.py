# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNXrjEfJpQqFc-QtrC8Z7XJEdI_xam_d
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Load the sonar data from the CSV file (replace with your dataset path if needed)
# For example, sonar_data = pd.read_csv('/path/to/your/sonar_data.csv', header=None)
sonar_data = pd.read_csv('/content/sonar_data.csv', header=None)

# Separate features (X) and labels (Y)
X = sonar_data.drop(columns=60, axis=1)  # Features (columns 0 to 59)
Y = sonar_data[60]  # Labels (column 60)

# Split data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=1)

# Initialize the K-Nearest Neighbors model
knn = KNeighborsClassifier(n_neighbors=5)

# Train the model
knn.fit(X_train, Y_train)

# Predict on the test data
Y_pred = knn.predict(X_test)

# Calculate metrics
accuracy = accuracy_score(Y_test, Y_pred)
report = classification_report(Y_test, Y_pred, output_dict=True)
precision = (report['R']['precision'] + report['M']['precision']) / 2
recall = (report['R']['recall'] + report['M']['recall']) / 2
f1_score = (report['R']['f1-score'] + report['M']['f1-score']) / 2

# Display metrics
print("K-Nearest Neighbors (KNN) Model Performance:")
print(f"Accuracy: {accuracy}")
print(f"Precision (average): {precision}")
print(f"Recall (average): {recall}")
print(f"F1 Score (average): {f1_score}")
print("\nClassification Report:\n", classification_report(Y_test, Y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(Y_test, Y_pred))

# Plot metrics
metrics = ['Accuracy', 'Precision', 'Recall', 'F1 Score']
values = [accuracy, precision, recall, f1_score]

plt.figure(figsize=(8, 6))
plt.bar(metrics, values, color=['skyblue', 'lightgreen', 'lightcoral', 'orange'])
plt.xlabel("Metrics")
plt.ylabel("Score")
plt.ylim(0, 1)  # Set y-axis limits for metrics (0 to 1)
plt.title("KNN Model Metrics")
plt.show()